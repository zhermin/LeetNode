generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


//USER INFO SECTION

model posts {
  postID    String @id @default(uuid())
  email     String
  title     String
  message   String   
  likes     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userpost_rs users @relation("postemail_rs", fields: [email], references: [email], onDelete: Cascade)
  postMedia_rs postMedia[] @relation("postMedia_rs")

  @@index([email])
}

model postMedia {
  postID String @id @default(uuid())
  postMediaURL String? //uplaod uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  postMedia_rs posts @relation("postMedia_rs", fields: [postID], references: [postID], onDelete: Cascade)

  @@index([postMediaURL])
}

model users {
  email     String   @id
  password  String   
  name      String   
  dpURL     String? //upload uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  role      Role 
  postemail_rs posts[]  @relation("postemail_rs")
  studentEmail_user_rs students[] @relation("studentEmail_user_rs") 

}

enum Role {
  ADMIN
  USER
  PROF
}

model students {
  studentEmail String  @id
  matriculationNumber String @unique
  studentEmail_user_rs users @relation("studentEmail_user_rs", fields: [studentEmail], references: [email], onDelete: Cascade)
  student_Masteries_rs studentMasteries[] @relation("student_Masteries_rs")
  students_studentAttempt_rs studentAttempts[] @relation("students_studentAttempt_rs")

  @@index([studentEmail])
}

model studentAttempts {
  studentEmail String
  questionID String
  attemptOption Int
  attemptCorrect Boolean
  attemptSeconds Int
  students_studentAttempt_rs students @relation("students_studentAttempt_rs", fields: [studentEmail], references: [studentEmail], onDelete: Cascade)
  questionAttemptID_rs questions @relation("questionAttemptID_rs", fields: [questionID], references: [questionID], onDelete: Cascade)
  
  @@id([studentEmail, questionID])

  @@index([studentEmail,questionID])
}

model studentMasteries {
  studentEmail String
  topicID String @id @default(uuid())
  masteryLevel Float @default(0)
  courseCompletion Float @default(0)
  studentMasteriesTopic_rs topics @relation("studentMasteriesTopic_rs", fields: [topicID], references: [topicID], onDelete: Cascade)
  student_Masteries_rs students @relation("student_Masteries_rs", fields: [studentEmail], references: [studentEmail], onDelete: Cascade)

  @@index([topicID, studentEmail])
}


//QUESTION BANK SECTIOn

model topics {
  topicID String @id @default(uuid())
  topicName String 
  topicLevel Int
  topicID_rs questions[] @relation("topicID_rs")
  studentMasteriesTopic_rs studentMasteries[] @relation("studentMasteriesTopic_rs")
}

model questions {
  questionID String @id @default(uuid())
  topicID String
  questionContent String @db.VarChar(500)
  questionDifficulty Int //1-easy, 2-medium, 3-hard
  topicID_rs topics @relation("topicID_rs", fields: [topicID], references: [topicID], onDelete: Cascade)
  questionAttemptID_rs studentAttempts[] @relation("questionAttemptID_rs")
  questionMediaID_rs questionMedia[] @relation("questionMediaID_rs")
  questionAnswerID_rs answers[] @relation("questionAnswerID_rs")

  @@index([topicID])
}

model questionMedia {
  questionID String @id @default(uuid())
  questionMediaURL String? //upload uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  questionMediaID_rs questions @relation("questionMediaID_rs", fields: [questionID], references: [questionID], onDelete: Cascade)

  @@index([questionID])
}

model answers {
  questionID     String @default(uuid())
  optionNumber   Int      
  answerContent  String   
  isCorrect      Boolean  
  questionAnswerID_rs questions @relation("questionAnswerID_rs", fields: [questionID], references: [questionID], onDelete: Cascade)

  @@id([questionID, optionNumber])

  @@index([questionID])
}


